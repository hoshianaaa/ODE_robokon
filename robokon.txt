
#include <ode/ode.h>                            // ODE用ヘッダーファイル
#include <drawstuff/drawstuff.h>                // 描画用ヘッダーファイル

#ifdef dDOUBLE
#define dsDrawSphere dsDrawSphereD
#define dsDrawCylinder dsDrawCylinderD
#define dsDrawBox dsDrawBoxD
#endif
const int   FIELD_NUM = 59;

static dWorldID world;                          //動力学計算用ワールド
static dSpaceID space;                          //衝突検出用スペース
static dGeomID  ground;
static dJointID joint[3],fixed[FIELD_NUM];
static dJointGroupID contactgroup;              //コンタクトグループ
static int flag = 0;                            //
dsFunctions fn;                                 //


const dReal   FIELD_Z = 0.255;
const dReal   WALL_W = 0.012;
const dReal   WALL_H = FIELD_Z + 0.04;
const dReal   START[3] = {2,0,0.1};

const dReal   WH_R = 0.04;                       //車輪の半径
const dReal   WH_W = 0.01;                      //車輪の幅
const dReal   WH_M   = 1.0;                     //車輪の質量
const dReal   WH2_R = 0.04;
const dReal   WH2_W = 0.04;
const dReal   WH2_M = 0.2;
dReal BASE_M = 9.4;                             //台車の質量
dReal BASE_S[3] = {0.3,0.2,0.1};                //台車のサイズ


dReal FIELD_S[FIELD_NUM][3] = {//追加するとこ

                        {0.480, 0.500,  0.255},//1
                        {0.020, 0.500,  0.255},
                        {0.012, 0.500,  0.295},
                        {0.612, 0.014,  0.295},
                        {0.512, 0.012,  0.295},

                        {0.100, 0.500,  0.255},//6
                        {0.300, 0.050,  0.255},
                        {0.300, 0.020,  0.255},
                        {1.700, 0.098,  0.255},
                        {0.140, 0.300,  0.255},

                        {0.020, 0.300,  0.255},//11
                        {0.630, 0.140,  0.255},
                        {0.630, 0.020,  0.255},
                        {0.630, 0.140,  0.255},
                        {0.020, 0.300,  0.255},

                        {0.350, 0.014,  0.295},//16
                        {0.350, 0.060,  0.255},
                        {0.300, 0.054,  0.255},
                        {0.300, 0.020,  0.255},
                        {0.350, 0.060,  0.255},

                        {0.350, 0.014,  0.295},//21
                        {0.300, 0.054,  0.255},
                        {0.300, 0.020,  0.255},
                        {0.890, 0.140,  0.255},
                        {0.100, 0.060,  0.255},

                        {0.100, 0.014,  0.295},//26
                        {0.014, 1.828,  0.295},
                        {0.490, 0.020,  0.255},
                        {0.490, 0.140,  0.255},
                        {1.300, 0.150,  0.255},

                        {0.100, 0.100,  0.255},//31
                        {0.400, 0.590,  0.255},
                        {0.014, 1.302,  0.295},
                        {1.800, 0.014,  0.295},
                        {0.900, 0.130,  0.295},

                        {0.900, 0.020,  0.295},//36
                        {0.900, 0.130,  0.295},
                        {0.140, 0.140,  0.255},
                        {0.020, 0.140,  0.255},
                        {0.300, 0.020,  0.255},

                        {0.240, 0.300,  0.255},//41
                        {0.100, 0.020,  0.255},
                        {0.100, 0.010,  0.255},
                        {0.240, 1.190,  0.255},
                        {0.020, 0.580,  0.255},

                        {0.240, 0.580,  0.255},//46
                        {0.900, 0.310,  0.255},
                        {0.250, 0.450,  0.255},
                        {0.090, 0.020,  0.255},
                        {0.020, 0.300,  0.255},

                        {0.090, 0.140,  0.255},//51
                        {1.310, 0.310,  0.255},
                        {1.230, 0.020,  0.255},
                        {1.230, 0.140,  0.255},
                        {1.230, 0.140,  0.255},

                        {0.020, 0.300,  0.255},//56
                        {0.040, 0.140,  0.255},
                        {0.040, 0.140,  0.255},
                        {0.040, 0.020,  0.255}

                        };
dReal FIELD_M[FIELD_NUM] = {0.01, 5 , 1, 1, 1,
                                        1,1,1,1,1,

                                        1,1,1,1,1,
                                        1,1,1,1,1,

                                        1,1,1,1,1,
                                        1,1,1,1,1,

                                        1,1,1,1,1,
                                        1,1,1,1,1,

                                        1,1,1,1,1,
                                        1,1,1,1,1,

                                        1,1,1,1,1,
                                        1,1,1,1

                                        };//追加するとこ



dReal v_r = 1.0;
dReal v_l = 0.0;

//初期位置//追加するとこ
dReal FIELD_POSITION[FIELD_NUM][3] = {
                                {START[0], START[1] , START[2]},//1
                                {START[0] + 0.250, START[1] , START[2]},
                                {START[0] - 0.246, START[1] , START[2]},
                                {START[0] + 0.054, START[1] + 0.257, START[2]},
                                {START[0] + 0.004, START[1] - 0.256, START[2]},

                                {START[0] + 0.310, START[1] , START[2]},
                                {START[0] + 0.510, START[1] + 0.239, START[2]},
                                {START[0] + 0.510, START[1] + 0.204, START[2]},
                                {START[0] + 1.210, START[1] + 0.145, START[2]},
                                {START[0] + 0.430, START[1] - 0.050, START[2]},


                                {START[0] + 0.510, START[1] - 0.050, START[2]},//11
                                {START[0] + 0.835, START[1] + 0.030, START[2]},
                                {START[0] + 0.835, START[1] , START[2]},
                                {START[0] + 0.835, START[1] - 0.130, START[2]},
                                {START[0] + 1.160, START[1] , START[2]},

                                {START[0] + 0.835, START[1] + 0.257, START[2]},
                                {START[0] + 0.835, START[1] + 0.220, START[2]},
                                {START[0] + 1.160, START[1] + 0.237, START[2]},
                                {START[0] + 1.160, START[1] + 0.200, START[2]},
                                {START[0] + 1.485, START[1] + 0.220, START[2]},


                                {START[0] + 1.485, START[1] + 0.257, START[2]},//21
                                {START[0] + 1.810, START[1] + 0.237, START[2]},
                                {START[0] + 1.810, START[1] + 0.200, START[2]},
                                {START[0] + 1.615, START[1] + 0.030, START[2]},
                                {START[0] + 2.010, START[1] + 0.220, START[2]},

                                {START[0] + 2.010, START[1] + 0.257, START[2]},
                                {START[0] + 2.067, START[1] - 0.650, START[2]},
                                {START[0] + 1.415, START[1] - 0.050, START[2]},
                                {START[0] + 1.415, START[1] - 0.130, START[2]},
                                {START[0] + 1.010, START[1] - 0.275, START[2]},


                                {START[0] + 0.310, START[1] - 0.300, START[2]},//31
                                {START[0] + 0.460, START[1] - 0.645, START[2]},
                                {START[0] + 0.253, START[1] - 0.913, START[2]},
                                {START[0] + 1.160, START[1] - 1.557, START[2]},
                                {START[0] + 1.110, START[1] - 0.415, START[2]},

                                {START[0] + 1.110, START[1] - 0.490, START[2]},//36
                                {START[0] + 1.110, START[1] - 0.565, START[2]},
                                {START[0] + 1.730, START[1] - 0.270, START[2]},
                                {START[0] + 1.810, START[1] - 0.270, START[2]},
                                {START[0] + 1.810, START[1] - 0.350, START[2]},


                                {START[0] + 1.940, START[1] - 0.190, START[2]},//41
                                {START[0] + 2.010, START[1] - 0.350, START[2]},
                                {START[0] + 1.610, START[1] - 0.355, START[2]},
                                {START[0] + 1.940, START[1] - 0.955, START[2]},
                                {START[0] + 1.810, START[1] - 0.650, START[2]},

                                {START[0] + 1.680, START[1] - 0.650, START[2]},
                                {START[0] + 1.110, START[1] - 0.785, START[2]},
                                {START[0] + 1.695, START[1] - 1.325, START[2]},
                                {START[0] + 1.615, START[1] - 1.080, START[2]},
                                {START[0] + 1.560, START[1] - 1.090, START[2]},


                                {START[0] + 1.615, START[1] - 1.010, START[2]},//51
                                {START[0] + 0.915, START[1] - 1.395, START[2]},
                                {START[0] + 0.935, START[1] - 1.090, START[2]},
                                {START[0] + 0.935, START[1] - 1.170, START[2]},
                                {START[0] + 0.935, START[1] - 1.010, START[2]},

                                {START[0] + 0.310, START[1] - 1.090, START[2]},
                                {START[0] + 0.280, START[1] - 1.010, START[2]},
                                {START[0] + 0.310, START[1] - 1.170, START[2]},
                                {START[0] + 0.280, START[1] - 1090., START[2]}


                            };
dReal BASE_POSITION[3] = {FIELD_POSITION[0][0],0.0,FIELD_S[0][2] + BASE_S[2]/2 + WH_R/3 + 0.2};
dReal WHEEL1_POSITION[3] = {BASE_POSITION[0] + BASE_S[0]/3, BASE_S[1]/2 + WH_W/2, FIELD_S[0][2] + WH_R/2 + 0.2};
dReal WHEEL2_POSITION[3] = {BASE_POSITION[0] + BASE_S[0]/3, -(BASE_S[1]/2 + WH_W/2), FIELD_S[0][2] + WH_R/2 + 0.2};
dReal WHEEL3_POSITION[3] = {BASE_POSITION[0] - BASE_S[0]/3, 0.0, FIELD_S[0][2] + WH2_R/2 + 0.2};
dReal JOINT1_POSITION[3] = {BASE_POSITION[0] + BASE_S[0]/3, BASE_S[1]/2, FIELD_S[0][2] + WH_R/2 + 0.2};
dReal JOINT2_POSITION[3] = {BASE_POSITION[0] + BASE_S[0]/3, -(BASE_S[1]/2), FIELD_S[0][2] + WH_R/2 + 0.2};
dReal JOINT3_POSITION[3] = {BASE_POSITION[0] - BASE_S[0]/3, 0.0, FIELD_S[0][2] + WH2_R/2 + 0.2};


typedef struct {                                // MyObject 構造体
  dBodyID body;                                 // ボディ（剛体）のID番号（動力学計算用）
  dGeomID geom;                                 // ジオメトリのID番号（衝突検出用計算）
} MyObject;

MyObject wheel[3],base,field[FIELD_NUM];




static void nearCallback (void *data, dGeomID o1, dGeomID o2)
{
    int i,n;

    dBodyID b1 = dGeomGetBody(o1);
    dBodyID b2 = dGeomGetBody(o2);
    if (b1 && b2 && dAreConnectedExcluding(b1,b2,dJointTypeContact)) return;

    static const int N = 10;
    dContact contact[N];
    n = dCollide(o1,o2,N,&contact[0].geom,sizeof(dContact));
    if (n > 0) {
        for (i=0; i < n; i++) {
            contact[i].surface.mode = dContactSlip1 | dContactSlip2 |
            dContactSoftERP | dContactSoftCFM | dContactApprox1;
            contact[i].surface.mu = dInfinity;
            contact[i].surface.slip1 = 0.1;
            contact[i].surface.slip2 = 0.1;
            contact[i].surface.soft_erp = 0.8;
            contact[i].surface.soft_cfm = 1e-5;
            dJointID c = dJointCreateContact(world,contactgroup,&contact[i]);
            dJointAttach(c,b1,b2);
        }
    }
}


static void control(){

    double fMax = 200;
    dJointSetHingeParam(joint[0], dParamVel, v_l);
    dJointSetHingeParam(joint[0], dParamFMax, fMax);
    dJointSetHingeParam(joint[1], dParamVel , v_r);
    dJointSetHingeParam(joint[1], dParamFMax, fMax);

}



static void simLoop (int pause)
{
  const dReal *pos,*R;

  control();

  flag = 0;
  dSpaceCollide(space,0,&nearCallback);     // 衝突検出関数
  dWorldStep(world,0.01);
  dJointGroupEmpty(contactgroup);           // ジョイントグループを空にする


  for(int i = 0; i < 2 ; i++){
    dsSetColor(1.0, 0.0, 0.0);
    dsDrawCylinder(dBodyGetPosition(wheel[i].body),dBodyGetRotation(wheel[i].body),WH_W,WH_R);
  }
  dsSetColor(0.0, 1.0, 0.0);
  dsDrawBox(dBodyGetPosition(base.body),dBodyGetRotation(base.body),BASE_S);

  //後輪
  dsSetColor(1.0, 0.0, 0.0);
  dsDrawCylinder(dBodyGetPosition(wheel[2].body),dBodyGetRotation(wheel[2].body),WH2_W,WH2_R);

  //フィールド//追加する

  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[0].body),dBodyGetRotation(field[0].body),FIELD_S[0]);//1しろいとこ
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[1].body),dBodyGetRotation(field[1].body),FIELD_S[1]);//2初期位置の黒線
  dsSetColor(1.0, 1.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[2].body),dBodyGetRotation(field[2].body),FIELD_S[2]);//3後ろ壁
  dsSetColor(1.0, 1.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[3].body),dBodyGetRotation(field[3].body),FIELD_S[3]);//4左壁
  dsSetColor(1.0, 1.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[4].body),dBodyGetRotation(field[4].body),FIELD_S[4]);//5右壁

  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[5].body),dBodyGetRotation(field[5].body),FIELD_S[5]);//6　２の前の白いとこ
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[6].body),dBodyGetRotation(field[6].body),FIELD_S[6]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[7].body),dBodyGetRotation(field[7].body),FIELD_S[7]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[8].body),dBodyGetRotation(field[8].body),FIELD_S[8]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[9].body),dBodyGetRotation(field[9].body),FIELD_S[9]);


  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[10].body),dBodyGetRotation(field[10].body),FIELD_S[10]);//11
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[11].body),dBodyGetRotation(field[11].body),FIELD_S[11]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[12].body),dBodyGetRotation(field[12].body),FIELD_S[12]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[13].body),dBodyGetRotation(field[13].body),FIELD_S[13]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[14].body),dBodyGetRotation(field[14].body),FIELD_S[14]);

  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[15].body),dBodyGetRotation(field[15].body),FIELD_S[15]);//16
  dsSetColor(1.2, 1.2, 0.0);
  dsDrawBox(dBodyGetPosition(field[16].body),dBodyGetRotation(field[16].body),FIELD_S[16]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[18].body),dBodyGetRotation(field[18].body),FIELD_S[18]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[19].body),dBodyGetRotation(field[19].body),FIELD_S[19]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[20].body),dBodyGetRotation(field[20].body),FIELD_S[20]);


  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[10].body),dBodyGetRotation(field[10].body),FIELD_S[10]);//21
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[11].body),dBodyGetRotation(field[11].body),FIELD_S[11]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[12].body),dBodyGetRotation(field[12].body),FIELD_S[12]);
  dsSetColor(1.2, 1.2, 1.2);
  dsDrawBox(dBodyGetPosition(field[13].body),dBodyGetRotation(field[13].body),FIELD_S[13]);
  dsSetColor(0.0, 0.0, 0.0);
  dsDrawBox(dBodyGetPosition(field[14].body),dBodyGetRotation(field[14].body),FIELD_S[14]);








}

void start()                                       /*** 前処理 ***/
{
  static float xyz[3] = {3.0,2.0,1.0};            // 視点の位置
  static float hpr[3] = {-90.0,0.0,0.0};             // 視点の方向
  dsSetViewpoint (xyz,hpr);
}

void  prepDrawStuff() {                             // 描画関数の設定
  fn.version = DS_VERSION;
  fn.start   = &start;
  fn.step    = &simLoop;
  fn.command = NULL;
  fn.stop    = NULL;
  fn.path_to_textures = "../../drawstuff/textures";
}

int main (int argc, char *argv[])
{

  dMass mass;
  dMatrix3 R;
  dReal angle = M_PI/2;

  prepDrawStuff();

  dInitODE();
  world = dWorldCreate();
  space = dHashSpaceCreate(0);
  contactgroup = dJointGroupCreate(0);

    dWorldSetGravity(world,0,0,-0.5);

  // Create a ground
  ground = dCreatePlane(space,0,0,1,0);

  // 車体
  base.body = dBodyCreate(world);                                       // ワールドにボディを生成
  dMassSetZero(&mass);                                                  // 質量パラメータの初期化
  dMassSetBoxTotal(&mass, BASE_M, BASE_S[0], BASE_S[1], BASE_S[2]);     // 質量パラメータの計算
  dBodySetMass(base.body, &mass);                                       // 質量パラメータの設定
  base.geom = dCreateBox(space, BASE_S[0], BASE_S[1], BASE_S[2]);       // ジオメトリの生成
  dGeomSetBody(base.geom, base.body);                                   // ジオメトリとボディの関連付け
  dBodySetPosition(base.body, BASE_POSITION[0], BASE_POSITION[1], BASE_POSITION[2]);               //　ボディの初期位置の設定

  // 車輪
  dRFromAxisAndAngle(R,1,0,0,angle);                                    // 回転行列の生成
  for (int i = 0; i < 2; i++) {
      wheel[i].body = dBodyCreate(world);                               // ボディの生成
      dMassSetZero(&mass);                                              // 質量パラメータの初期化
      dMassSetCylinderTotal(&mass, WH_M, 1, WH_R, WH_W);                // 質量パラメータの計算
      dBodySetMass(wheel[i].body, &mass);                               // 質量パラメータの設定
      wheel[i].geom = dCreateCylinder(space, WH_R, WH_W);               // ジオメトリの生成
      dGeomSetBody(wheel[i].geom, wheel[i].body);                       // ボディとジオメトリの関連付け
      dBodySetRotation(wheel[i].body, R);                               // ボディの初期姿勢の設定
  }
  // 後輪
      wheel[2].body = dBodyCreate(world);                               // ボディの生成
      dMassSetZero(&mass);                                              // 質量パラメータの初期化
      dMassSetCylinderTotal(&mass, WH2_M, 1, WH2_R, WH2_W);                // 質量パラメータの計算
      dBodySetMass(wheel[2].body, &mass);                               // 質量パラメータの設定
      wheel[2].geom = dCreateCylinder(space, WH2_R, WH2_W);               // ジオメトリの生成
      dGeomSetBody(wheel[2].geom, wheel[2].body);                       // ボディとジオメトリの関連付け
      dBodySetRotation(wheel[2].body, R);



  dBodySetPosition(wheel[0].body, WHEEL1_POSITION[0], WHEEL1_POSITION[1], WHEEL1_POSITION[2]);
  dBodySetPosition(wheel[1].body, WHEEL2_POSITION[0], WHEEL2_POSITION[1], WHEEL2_POSITION[2]);
  dBodySetPosition(wheel[2].body, WHEEL3_POSITION[0], WHEEL3_POSITION[1], WHEEL3_POSITION[2]);




  //ジョイント
  for (int  i = 0; i < 3; i++){
    joint[i] = dJointCreateHinge(world, 0);
    dJointAttach(joint[i], base.body, wheel[i].body);
  }
  dJointSetHingeAxis(joint[0], 0, -1, 0);
  dJointSetHingeAxis(joint[1], 0, -1, 0);
  dJointSetHingeAxis(joint[2], 0, -1, 0);
  dJointSetHingeAnchor(joint[0], JOINT1_POSITION[0], JOINT1_POSITION[1], JOINT1_POSITION[2]);
  dJointSetHingeAnchor(joint[1], JOINT2_POSITION[0], JOINT2_POSITION[1], JOINT2_POSITION[2]);
  dJointSetHingeAnchor(joint[2], JOINT3_POSITION[0], JOINT3_POSITION[1], JOINT3_POSITION[2]);





  //フィールド
    for(int i=0;i<FIELD_NUM;i++){
        field[i].body = dBodyCreate(world);                                       // ワールドにボディを生成
        dMassSetZero(&mass);                                                  // 質量パラメータの初期化
        dMassSetBoxTotal(&mass, FIELD_M[i], FIELD_S[i][0], FIELD_S[i][1], FIELD_S[i][2]);     // 質量パラメータの計算
        dBodySetMass(field[i].body, &mass);                                       // 質量パラメータの設定
        field[i].geom = dCreateBox(space, FIELD_S[i][0], FIELD_S[i][1], FIELD_S[i][2]);       // ジオメトリの生成
        dGeomSetBody(field[i].geom, field[i].body);                                   // ジオメトリとボディの関連付け
        dBodySetPosition(field[i].body,FIELD_POSITION[i][0], FIELD_POSITION[i][1], FIELD_POSITION[i][2]);               //　ボディの初期位置の設定
    };

    //field  fix


    for (int  i = 0; i < FIELD_NUM; i++){
        fixed[i] = dJointCreateFixed(world, 0);//※注意　field生成後に書かないと固定できない
        dJointAttach(fixed[i],field[i].body, 0);
        dJointSetFixed(fixed[i]);
    };







  dsSimulationLoop (argc,argv,352,288,&fn);

  dWorldDestroy (world);
  dCloseODE();

  return 0;
}
